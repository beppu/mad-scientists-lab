#!/usr/bin/env node
const dotenv    = require('dotenv').config()
const pkg       = require('../package.json')
const ta        = require('../index')
const utils     = require('../utils')
const time      = require('../time')
const pipeline  = require('../pipeline')
const luxon     = require('luxon')
const commander = require('commander')
const talib     = require('talib')
const beautify  = require('json-beautify')
const ccxt      = require('ccxt')
const Bluebird  = require('bluebird')
const fs        = require('fs')
const mkdirp    = require('mkdirp')
const {DateTime} = luxon

const parseIntB10 = utils.parseIntB10

function parseSince(x) {
  if (x.match(/last/i)) {
    return "last"
  } else {
    return utils.parseIntB10(x)
  }
}

async function main() {
  const program   = new commander.Command();
  program
    .version(pkg.version)
    .description('Download OHLCV candlestick data')
    .option('-x, --exchange <NAME>', 'Exchange to pull data from', process.env.TA_EXCHANGE || 'bitmex')
    .option('-m, --market <SYMBOL>', 'Market in exchange to pull data from', process.env.TA_MARKET || 'BTC/USDT')
    .option('-t, --timeframe <INTERVAL>', 'Candlestick duration for market data', process.env.TA_TIMEFRAME || '5m')
    .option('-s, --since <TIMESTAMP>', 'Specify a timestamp for the first candle or special timestamp "last"', parseSince, 1000)
    .option('-l, --limit <CANDLES>', 'Specify how many candles to ask for per API call', parseIntB10, 1000)
    .option('-d, --data <PATH>', 'Directory to store candlestick data in', './data')
    .option('-D, --delay <MILLISECONDS>', 'Milliseconds to wait before sending next request', parseIntB10, 3000)
    .option('-i, --info', 'Display timeframes and markets available for an exchange')
    .option('-v, --verbose', 'Be verbose')
  program.parse(process.argv)
  if (program.info && program.exchange) {
    let width
    if (process.env.COLUMNS) {
      width = parseIntB10(process.env.COLUMNS)
    } else {
      width = 80
    }
    try {
      const Exchange = ccxt[program.exchange]
      const exchange = new Exchange({ enableRateLimit: true })
      const markets = await exchange.fetchMarkets()
      console.log(beautify({
        exchange: program.exchange,
        markets: markets.map((m) => m.symbol),
        timeframes: Object.keys(exchange.timeframes)
      }, null, 2, width))
      process.exit(-1)
    }
    catch (e) {
      console.warn(e)
      process.exit(-1)
    }
  }
  let optionsAreMissing = false;
  ['exchange', 'market', 'timeframe'].forEach((opt) => {
    if (!program[opt]) {
      console.error(`The --${opt} option is required.`)
      optionsAreMissing = true
    }
  })
  if (optionsAreMissing) {
    process.exit(-1)
  }
  const locked = utils.lockProcess(process, 'mexico', `${program.exchange}-${program.market.replace(/\W/g, '')}-${program.timeframe}.lock`)
  if (!locked) {
    console.warn(`mexico is already running for ${program.exchange} ${program.market} ${program.timeframe}.`)
    process.exit(-2)
  }
  try {
    const dataPath = utils.dataPath(program.data, program.exchange, program.market, program.timeframe)
    console.log(dataPath)
    mkdirp.sync(dataPath)
    // XXX just work with bitmex for now
    // - download the first 1000 candles
    // - write out the results as a JSON file
    // - wait a few seconds to stay well within API limits
    // - calculate the timestamp of the first candle of the next 1000 candles
    // - repeat until the number of candles returned is less than 1000
    const Exchange = ccxt[program.exchange]
    const exchange = new Exchange({ enableRateLimit: true })
    const limit = program.limit
    const millisecondsToNextCandle = time.timeframeToMilliseconds(program.timeframe)
    let since = program.since
    if (since === "last") {
      since = await pipeline.lastTimestampFromFS(program.data, program.exchange, program.market, program.timeframe)
    }
    let candles = []
    do {
      const now = DateTime.local()
      candles = await exchange.fetchOHLCV(program.market, program.timeframe, since, limit)
      if (candles.length) {
        let timestamp = candles[0][0]
        let filename = `${dataPath}/${timestamp}.json`
        let ts = DateTime.fromMillis(timestamp)
        if (program.verbose) {
          let extra = {}
          if (program.exchange === 'bitmex')
            Object.assign(extra, {
              limit:     exchange.last_response_headers['X-Ratelimit-Limit'],
              remaining: exchange.last_response_headers['X-Ratelimit-Remaining'],
              reset:     exchange.last_response_headers['X-Ratelimit-Limit']
            })
          console.log(now.toISO(), ts.toISO(), candles.length, filename, extra)
        }
        fs.writeFileSync(filename, JSON.stringify(candles))
        await Bluebird.delay(program.delay)
        since = candles[candles.length - 1][0] + millisecondsToNextCandle
      }
    } while (candles.length == limit)
  }
  catch (err) {
    console.error(err.stack)
    process.exit(-1)
  }
}

if (require.main === module) {
  main()
}

// for repl debugging, export functions and variables here
module.exports = {
  main
}
