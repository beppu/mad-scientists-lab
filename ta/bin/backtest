#!/usr/bin/env node
// Does the potential for regular divergence exist?
const dotenv    = require('dotenv').config()
const pkg       = require('../package.json')
const ta        = require('../index')
const time      = require('../time')
const utils     = require('../utils')
const pipeline  = require('../pipeline')
const luxon     = require('luxon')
const commander = require('commander')
const talib     = require('talib')
const beautify  = require('json-beautify')

const {DateTime} = luxon

async function main() {
  const program   = new commander.Command();
  program
    .version(pkg.version)
    .description('Backtest a trading strategy against historical price data')
    .option('-x, --exchange <NAME>', 'Exchange to pull data from', process.env.TA_EXCHANGE)
    .option('-m, --market <SYMBOL>', 'Market in exchange to pull data from', process.env.TA_MARKET)
    .option('-t, --timeframe <INTERVAL>', 'Candlestick duration for market data', process.env.TA_TIMEFRAME)
    .option('-s, --strategy <STRATEGY>', 'Name of trading strategy to use')
    .option('-d, --data <PATH>', 'Directory to store candlestick data in', './data')
  program.parse(process.argv)
  let optionsAreMissing = false
  if (optionsAreMissing) {
    process.exit(-1)
  }
  try {
    /*
     * I need an execution environment.
     * The strategy has to ask for some things upfront.
     * - What indicators do you want on which timeframes?
     * - The environment must be able to emulate larger timeframes by aggregating smaller timeframes.
     * The execution environment has to provide the data that the strategy asks for.
     * - I have a way of downloading candles now.
     * - I may want to standardize how I store them so that I can predictably retrieve them.
     *   + `${exchange}/${market}/${timeframe}/${timestamp}.json`
     *   + files are assumed to be in numeric order and without gaps
     * The analysis state should change as new data comes in.
     * Based on the analysis state, orders should be placed by the strategy when appropriate.
     */

    // Let's feel this out.
    const nextCandle = await pipeline.loadCandlesFromFS(program.data, program.exchange, program.market, program.timeframe)
    let candle = await nextCandle()
    // How do I want to aggregate candles?
    // I need both finished AND unfinished candles.
    // Once they're finished, they get stored in an array for later.
    // While they're unfinished, they get replaced at the end of an array
    let history = {
      default: [],
      '2h': [],
      '4h': [],
      '1d': [],
    }
    let ax2h = pipeline.aggregatorFn('2h')
    let ax4h = pipeline.aggregatorFn('4h')
    let ax1d = pipeline.aggregatorFn('1d')
    while (candle != null) {
      history.default.push(candle)
      let [candle2h, isBoundary2h] = ax2h(candle)
      if (isBoundary2h) {
        history['2h'].push(candle2h)
      } else {
        history['2h'][history['2h'].length-1] = candle2h
      }
      let [candle4h, isBoundary4h] = ax4h(candle)
      if (isBoundary4h) {
        history['4h'].push(candle4h)
      } else {
        history['4h'][history['4h'].length-1] = candle4h
      }
      let [candle1d, isBoundary1d] = ax1d(candle)
      if (isBoundary1d) {
        history['1d'].push(candle1d)
      } else {
        history['1d'][history['1d'].length-1] = candle1d
      }
      candle = await nextCandle()
    }
    console.log(history.default.length, history['2h'].length, history['4h'].length, history['1d'].length)
  }
  catch (err) {
    console.error(err.stack)
    process.exit(-1)
  }
}

main()
