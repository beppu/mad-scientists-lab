#!/usr/bin/env node
const dotenv      = require('dotenv').config()
const luxon       = require('luxon')
const commander   = require('commander')
const talib       = require('talib')
const beautify    = require('json-beautify')
const merge       = require('lodash.merge')
const reverse     = require('lodash.reverse')
const zip         = require('lodash.zip')
const pino        = require('pino')
const fs          = require('fs')
const pkg         = require('../package.json')
const ta          = require('../index')
const time        = require('../time')
const utils       = require('../utils')
const pipeline    = require('../pipeline')
const ix          = require('../indicators')
const strategies  = require('../strategies')
const research    = require('../research')
const simulator   = require('../exchanges/simulator')
const interactive = require('../interactive')
const log         = require('../log')

const {DateTime} = luxon

const logger = pino()

const parseIntB10 = utils.parseIntB10

const DEFAULT_STRATEGY = 'BuyAndHold'

function lookupStrategy(pr) {
  let strategy
  if (pr.research) {
    strategy = research[pr.research]
  } else {
    strategy = strategies[pr.strategy]
  }
  if (!strategy) {
    const strategyType = pr.research ? 'Research Strategy' : 'Trading Strategy'
    const strategyName = pr.research ? pr.research : pr.strategy
    console.error(`${strategyType} "${strategyName}" not found.`)
    if (pr.research) {
      console.log(Object.keys(research))
    } else {
      console.log(Object.keys(strategies))
    }
    process.exit(-1)
  }
  return strategy
}

function parseDateTime(d) {
  return DateTime.fromISO(d)
}

function prompt() {
  process.stdout.write('> ')
}

function breakpointExists({ marketState, exchangeState, strategyState, orders, executedOrders }) {
  return executedOrders && executedOrders.filter((o) => o.status === 'filled').length > 0
}

function calculateEquity(exchangeState, price) {
  if (exchangeState.position >= 0) {
    return (price * exchangeState.position) + exchangeState.balance
  } else {
    const position = Math.abs(exchangeState.position)
    const difference = (position * exchangeState.averageEntryPrice) - (position * price)
    return exchangeState.balance + (position * exchangeState.averageEntryPrice + difference)
  }
}

function tradingFee(type, quantity, price) {
  switch (type) {
  case 'market':
    return quantity * 0.00075 * price
    break;
  case 'limit':
    return quantity * -0.00025 * price
    break;
  }
  return 0
}

async function main() {
  const program   = new commander.Command();
  program
    .version(pkg.version)
    .description('Backtest a trading strategy against historical price data')
    .option('-x, --exchange <NAME>', 'Exchange to pull data from', process.env.TA_EXCHANGE)
    .option('-m, --market <SYMBOL>', 'Market in exchange to pull data from', process.env.TA_MARKET)
    .option('-t, --timeframe <INTERVAL>', 'Candlestick duration for market data', process.env.TA_TIMEFRAME)
    .option('-d, --data <PATH>', 'Directory to store candlestick data in', './data')
    .option('-s, --strategy <STRATEGY>', 'Name of trading strategy to use', DEFAULT_STRATEGY)
    .option('-r, --research <STRATEGY>', 'Use a strategy from the research collection instead')
    .option('-c, --config <CONFIG.JSON>', 'Path to a JSON config file for the strategy')
    .option('-b, --balance <DOLLARS>', 'Amount of money to start with', parseIntB10, 100000)
    .option('--start-processing-at <DATETIME>', 'Refrain from indicator calculation until the given DateTime is reached', parseDateTime)
    .option('--begin <DATETIME>', 'DateTime to begin the strategy', parseDateTime)
    .option('--end <DATETIME>', 'DateTime to end the strategy', parseDateTime)
    .option('-i, --interactive', 'Interactive mode')
    .option('-l, --order-log <LOG_DIR>', 'Directory to store logs', (id) => id, './log')
    .option('-v, --verbose', 'Be verbose')
  program.parse(process.argv)
  let optionsAreMissing = false;
  ['exchange', 'market', 'timeframe'].forEach((opt) => {
    if (!program[opt]) {
      console.error(`The --${opt} option is required.`)
      optionsAreMissing = true
    }
  })
  if (optionsAreMissing) {
    process.exit(-1)
  }
  if (program.strategy !== DEFAULT_STRATEGY && program.research) {
    console.error(`You can't use --strategy and --research at the same time.  Pick one and only one.`)
    process.exit(-1)
  }
  if (program.begin && program.startProcessingAt) {
    if (program.begin < program.startProcessingAt) {
      console.error("--start-processing-at must have an earlier DateTime than --begin.")
      process.exit(-1)
    }
  }
  if (program.interactive) {
    interactive.init()
  }
  try {
    /*
     * I need an execution environment.
     * The strategy has to ask for some things upfront.
     * - What indicators do you want on which timeframes?
     * - The environment must be able to emulate larger timeframes by aggregating smaller timeframes.
     * The execution environment has to provide the data that the strategy asks for.
     * - I have a way of downloading candles now.
     * - I may want to standardize how I store them so that I can predictably retrieve them.
     *   + `${exchange}/${market}/${timeframe}/${timestamp}.json`
     *   + files are assumed to be in numeric order and without gaps
     * The analysis state should change as new data comes in.
     * Based on the analysis state, orders should be placed by the strategy when appropriate.
     */

    // Let's feel this out.

    // Exchange Simulator
    let config = { balance: program.balance, logger }
    const exchange = simulator.create(config)
    const allExecutedOrders = []

    // Strategy
    let strategyConfig
    if (program.config) {
      const configPath = `${process.cwd()}/${program.config}`
      const jsonConfig = require(configPath)
      strategyConfig = merge(config, jsonConfig)
    } else {
      strategyConfig = config
    }
    const Strategy = lookupStrategy(program)
    const strategyInit = Strategy.init
    console.log(Strategy)
    const [indicatorSpecs, strategy] = strategyInit(program.timeframe, strategyConfig)
    indicatorSpecs.inverted = true // force the pipeline to use the InvertedSeries data structure.
    if (program.verbose) {
      console.log('indicatorSpecs', indicatorSpecs)
    }

    // Executed Order Logger
    const orderLogger = log.createOrderLogger(
      program.begin,
      program.end,
      program.orderLog,
      [program.strategy, strategyConfig],
      Strategy.configSlug // this is allowed to be undefined
    )

    // Pipeline of Price Data
    const iterate = pipeline.mainLoopFn(program.timeframe, indicatorSpecs)
    const nextCandle = await pipeline.loadCandlesFromFS(program.data, program.exchange, program.market, program.timeframe, program.startProcessingAt)

    // Mutable Variables
    let marketState, strategyState, orders, exchangeState, executedOrders // state changes flow in this order
    let candle = await nextCandle()
    let firstTimestamp = time.dt(candle[0])
    let startProcessing
    let begin
    let end = false
    if (program.startProcessingAt) {
      startProcessing = firstTimestamp >= program.startProcessingAt
    } else {
      startProcessing = true
    }
    if (program.begin) {
      begin = firstTimestamp >= program.begin
    } else {
      if (program.startProcessingAt) {
        begin = false
      } else {
        begin = true
      }
    }
    if (program.verbose) {
      if (program.startProcessingAt) {
        console.log('start-processing-at', program.startProcessingAt.toISO(), startProcessing)
      }
      if (program.begin) {
        console.log('begin', program.begin.toISO(), begin)
      }
      if (program.end) {
        console.log('end', program.end.toISO(), end)
      }
      console.log({ startProcessing, begin, end })
      console.log('---- while loop')
    }

    while (candle && !end) {

      // This is the heart of the analysis pipeline.
      // - Calculate marketState using the latest candle.
      // - Inform the strategy of the latest marketState and executedOrders.
      // - Receive a new strategyState and a new list of orders.
      // - Give the orders to the simulated exchange.
      // - Receive a new exchangeState and a new list of executedOrders.
      // - Load the next candle and repeat until and end condition is met.
      if (startProcessing) {
        marketState = iterate(candle)
      }
      if (program.verbose) {
        if (time.isTimeframeBoundary('1d', time.dt(candle[0]))) {
          console.log(time.dt(candle[0]).toISO(), candle)
        }
      }
      if (begin) {
        ;[strategyState, orders] = strategy(strategyState, marketState, executedOrders)
        if (program.verbose && orders && orders.length) {
          console.log('-- ', time.iso(candle[0]), candle)
          console.log('orders: ', orders)
        }
        ;[exchangeState, executedOrders] = await exchange(orders, exchangeState, candle)
        if (program.verbose && executedOrders && executedOrders.length) {
          allExecutedOrders.push(...executedOrders)
          const key = `imd${program.timeframe}`
          const close = marketState[key].close[0]
          console.log('executedOrders: ', executedOrders)
          console.log('equity: ', calculateEquity(exchangeState, close))
        }
        // log executedOrders
        executedOrders.forEach((o) => {
          const line = {
            timestamp: o.timestamp,
            side: o.action,
            type: o.type,
            symbol: program.market,
            quantity: o.quantity,
            price: o.fillPrice,
            fee: tradingFee(o.type, o.quantity, o.price)
          }
          orderLogger.info(line)
        })
      }
      candle = await nextCandle()

      // Check candle[0] for begin and end conditions
      if (candle) {
        let timestamp = time.dt(candle[0])
        if (!begin) {
          begin = timestamp >= program.begin
          if (begin && program.verbose) {
            console.log('starting strategy at', timestamp.toISO())
          }
        }
        if (program.end && candle) {
          end = timestamp > program.end
          if (end && program.verbose) {
            console.log('ending strategy at', timestamp.toISO())
          }
        }
        if (!startProcessing) {
          startProcessing = timestamp >= program.startProcessingAt
          if (startProcessing && program.verbose) {
            console.log('start processing at', timestamp.toISO())
          }
          if (startProcessing && !program.begin) {
            begin = true
            if (program.verbose) {
              console.log('starting strategy at', timestamp.toISO())
            }
          }
        }
      }
      if (program.interactive) {
        if (breakpointExists({marketState, exchangeState, strategyState, orders, executedOrders})) {
          prompt()
          let key = await interactive.keyPress()
          while (key.name !== 'n') { // n for next
            if (key.name === 'q') {
              process.exit(0)
            }
            if (key.name === 'e') {
              console.log(calculateEquity(exchangeState, candle[4]))
            }
            if (key.name === 'x') {
              console.log(exchangeState)
            }
            if (key.name === 's') {
              console.log(strategyState)
            }
            if (key.name === 'm') {
              console.log(candle[4]) // TODO partial marketState
            }
            if (key.name === 'o') {
              console.log({ orders, executedOrders })
            }
            prompt()
            key = await interactive.keyPress()
          }
        }
      }
    }

    // What's the damage?
    console.log(strategyState)
    console.log(exchangeState)
    const key = `imd${program.timeframe}`
    const close = marketState[key].close[0]
    console.log('Closing Price', close)
    console.log('Closing DateTime', time.iso(marketState[key].timestamp[0]))
    console.log('Equity', calculateEquity(exchangeState, close))  // XXX If the position is negative, figure out the short profit correctly.
    //console.log(allExecutedOrders)
    /*
    const first = marketState.imd1d.timestamp[marketState.imd1d.rsi.length - 1]
    const timestamps = marketState.imd1d.timestamp.slice(0, marketState.imd1d.rsi.length)
    const closes = marketState.imd1d.close.slice(0, marketState.imd1d.rsi.length)
    const info = reverse(zip(timestamps.map(time.iso), closes, marketState.imd1d.rsi.map((r) => 100 - r)))
    utils.dump(info, `${first}.json`)
    */
    process.exit(0)
  }
  catch (err) {
    console.error(err.stack)
    process.exit(-1)
  }
}

if (require.main === module) {
  main()
}

// for repl debugging, export functions and variables here
module.exports = {
  main
}
