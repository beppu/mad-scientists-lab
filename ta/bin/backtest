#!/usr/bin/env node
const dotenv      = require('dotenv').config()
const luxon       = require('luxon')
const commander   = require('commander')
const talib       = require('talib')
const beautify    = require('json-beautify')
const merge       = require('lodash.merge')
const reverse     = require('lodash.reverse')
const zip         = require('lodash.zip')
const pino        = require('pino')
const sprintf     = require('sprintf')
const fs          = require('fs')
const Bluebird    = require('bluebird')
const pkg         = require('../package.json')
const ta          = require('../index')
const time        = require('../time')
const utils       = require('../utils')
const pipeline    = require('../pipeline')
const ix          = require('../indicators')
const strategies  = require('../strategies')
const research    = require('../research')
const simulator   = require('../exchanges/simulator')
const interactive = require('../interactive')
const log         = require('../log')
const gnuplot     = require('../gnuplot')

const {DateTime} = luxon

let logger

const parseIntB10 = utils.parseIntB10

const DEFAULT_STRATEGY = 'BuyAndHold'

// TODO - Make fees configurable
const FEES = {
  maker: -0.00025, // negative fee is a rebate you get back
  taker: 0.00075
}

// TODO - Add the ability to load strategies from arbitrary paths.
function lookupStrategy(pr) {
  let strategy
  if (pr.research) {
    strategy = research[pr.research]
  } else {
    strategy = strategies[pr.strategy]
  }
  if (!strategy) {
    const strategyType = pr.research ? 'Research Strategy' : 'Trading Strategy'
    const strategyName = pr.research ? pr.research : pr.strategy
    console.error(`${strategyType} "${strategyName}" not found.`)
    if (pr.research) {
      console.log(Object.keys(research))
    } else {
      console.log(Object.keys(strategies))
    }
    process.exit(-1)
  }
  return strategy
}

function parseDateTime(d) {
  return DateTime.fromISO(d)
}

function prompt(candle) {
  process.stdout.write(`[${time.iso(candle[0])}][${candle[4]}]> `)
}

function breakpointExists({ marketState, exchangeState, strategyState, orders, executedOrders }) {
  if (exchangeState && exchangeState.breakPoint) {
    if (marketState && marketState.imd1m) {
      let currentTime = marketState.imd1m.timestamp[0]
      if (exchangeState.breakPoint === currentTime) {
        return true
      }
    }
  }
  return executedOrders && executedOrders.filter((o) => o.status === 'filled').length > 0
}

function calculateEquity(exchangeState, price) {
  if (exchangeState.position >= 0) {
    return (price * exchangeState.position) + exchangeState.balance
  } else {
    const position = Math.abs(exchangeState.position)
    const difference = (position * exchangeState.averageEntryPrice) - (position * price)
    return exchangeState.balance + (position * exchangeState.averageEntryPrice + difference)
  }
}

function writeOrdersSync(orders, filename) {
  const header = `# 1:timestamp, 2:fillPrice, 3:quantity, 4:action\n`
  const out = orders.map((o) => {
    return `${time.isoGP(o.timestamp)} ${o.fillPrice} ${o.quantity} ${o.action}`
  }).join("\n") + "\n"
  fs.writeFileSync(filename, header + out)
}

function writePnlSync(pnls, filename) {
  const header = `# 1:timestamp, 2:equity\n`
  const out = pnls.map((p) => {
    return `${time.isoGP(p[0])} ${p[1]}`
  }).join("\n") + "\n"
  fs.writeFileSync(filename, header + out)
}

let firstTimeInteractive = true
async function interactiveLoop({marketState, exchangeState, strategyState, orders, executedOrders, candle}) {
  if (breakpointExists({marketState, exchangeState, strategyState, orders, executedOrders})) {
    if (firstTimeInteractive) {
      console.log('Press "h" for help.')
      firstTimeInteractive = false
    }
    prompt(candle)
    let key = await interactive.keyPress()
    while (key.name !== 'n') { // n for next
      if (key.name === 'q') {
        process.exit(0)
      }
      if (key.name === 'm') {
        if (marketState && marketState.imd1m) {
          let currentTime = marketState.imd1m.timestamp[0]
          exchangeState.breakPoint = currentTime + (60 * 1000)
          console.log(time.iso(currentTime), '->', time.iso(exchangeState.breakPoint))
          break
        }
      }
      if (key.name === 'e') {
        console.log(calculateEquity(exchangeState, candle[4]))
      }
      if (key.name === 'x') {
        console.log(exchangeState)
      }
      if (key.name === 's') {
        console.log(strategyState)
      }
      if (key.name === 'o') {
        console.log({ orders, executedOrders })
      }
      if (key.name === 'h') {
        console.log(`
          h help
          m step one minute forward
          n next (continue backtesting)
          q quit (stop backtesting)
          e equity
          x exchangeState
          s strategyState
          o orders and executedOrders
        `)
      }
      prompt(candle)
      key = await interactive.keyPress()
    }
  }
}

async function main() {
  const program   = new commander.Command();
  program
    .version(pkg.version)
    .description('Backtest a trading strategy against historical price data')
    .option('-x, --exchange <NAME>', 'Exchange to pull data from', process.env.TA_EXCHANGE)
    .option('-m, --market <SYMBOL>', 'Market in exchange to pull data from', process.env.TA_MARKET)
    .option('-t, --timeframe <INTERVAL>', 'Candlestick duration for market data', process.env.TA_TIMEFRAME)
    .option('-d, --data <PATH>', 'Directory to store candlestick data in', './data')
    .option('-s, --strategy <STRATEGY>', 'Name of trading strategy to use', DEFAULT_STRATEGY)
    .option('-r, --research <STRATEGY>', 'Use a strategy from the research collection instead')
    .option('-c, --config <CONFIG.JSON>', 'Path to a JSON config file for the strategy')
    .option('-b, --balance <DOLLARS>', 'Amount of money to start with', parseIntB10, 100000)
    .option('-p, --pnl-timeframe <INTERVAL>', 'Timeframe for pnl measurements (for gnuplot output)', '1d')
    .option('--start-processing-at <DATETIME>', 'Refrain from indicator calculation until the given DateTime is reached', parseDateTime)
    .option('--begin <DATETIME>', 'DateTime to begin the strategy', parseDateTime)
    .option('--end <DATETIME>', 'DateTime to end the strategy', parseDateTime)
    .option('-l, --log <LOG_DIR>', 'Directory to store logs', (id) => id, './log/backtest')
    .option('-g, --gnuplot', 'Output gnuplot data to the log directory')
    .option('-i, --interactive', 'Interactive mode')
    .option('-v, --verbose', 'Be verbose')
  program.parse(process.argv)
  let optionsAreMissing = false;
  ['exchange', 'market', 'timeframe'].forEach((opt) => {
    if (!program[opt]) {
      console.error(`The --${opt} option is required.`)
      optionsAreMissing = true
    }
  })
  if (optionsAreMissing) {
    process.exit(-1)
  }
  if (program.strategy !== DEFAULT_STRATEGY && program.research) {
    console.error(`You can't use --strategy and --research at the same time.  Pick one and only one.`)
    process.exit(-1)
  }
  if (program.begin && program.startProcessingAt) {
    if (program.begin < program.startProcessingAt) {
      console.error("--start-processing-at must have an earlier DateTime than --begin.")
      process.exit(-1)
    }
  }
  if (program.interactive) {
    interactive.init()
  }
  try {
    /*
     * I need an execution environment.
     * The strategy has to ask for some things upfront.
     * - What indicators do you want on which timeframes?
     * - The environment must be able to emulate larger timeframes by aggregating smaller timeframes.
     * The execution environment has to provide the data that the strategy asks for.
     * - I have a way of downloading candles now.
     * - I may want to standardize how I store them so that I can predictably retrieve them.
     *   + `${exchange}/${market}/${timeframe}/${timestamp}.json`
     *   + files are assumed to be in numeric order and without gaps
     * The analysis state should change as new data comes in.
     * Based on the analysis state, orders should be placed by the strategy when appropriate.
     * The exchange simulator should execute those orders.
     * - Exchange events like order creation and order execution should be reported back to the strategy.
     * - Order rejection and order cancellation should also be reported back.
     */

    // Let's feel this out.

    // Activity Logger
    // - A strategy's log output goes here.
    // - Use this to debug decision-making.
    const activityLogPath = `${program.log}/activity.log`
    logger = pino(pino.destination(activityLogPath))

    // Exchange Simulator
    let simulatorConfig = { balance: program.balance, logger }
    const exchange = simulator.create(simulatorConfig)
    const allExecutedOrders = []

    // Strategy
    let strategyConfig
    if (program.config) {
      const configPath = `${process.cwd()}/${program.config}`
      const jsonConfig = require(configPath)
      strategyConfig = merge({ logger }, jsonConfig) // XXX 2021-06-24 noticed that merge mutated config which was a surprise.
    } else {
      strategyConfig = { logger }
    }
    const Strategy = lookupStrategy(program)
    const strategyInit = Strategy.init
    const [indicatorSpecs, strategy] = strategyInit(strategyConfig)
    // force indicatorSpecs to also ask for pnlTimeframe if it isn't already there.
    if (!indicatorSpecs[program.pnlTimeframe]) {
      indicatorSpecs[program.pnlTimeframe] = []
    }
    // force the pipeline to use the InvertedSeries data structure.
    indicatorSpecs.inverted = true
    if (program.verbose) {
      console.log('indicatorSpecs', indicatorSpecs)
    }

    // Executed Order Logger
    const orderLogger = log.createOrderLogger(
      program.begin,
      program.end,
      program.exchange,
      program.market,
      program.log,
      [program.strategy, strategyConfig],
      Strategy.configSlug // this is allowed to be undefined
    )

    // Pipeline of Price Data
    const iterate = pipeline.mainLoopFn(program.timeframe, indicatorSpecs)
    const nextCandle = await pipeline.loadCandlesFromFS(program.data, program.exchange, program.market, program.timeframe, program.startProcessingAt)

    // Mutable Variables
    let marketState, strategyState, orders, exchangeState, executedOrders // state changes flow in this order
    let historicalPnl = []
    let candle = await nextCandle()
    let firstTimestamp = time.dt(candle[0])
    let startProcessing
    let begin
    let end = false
    if (program.startProcessingAt) {
      startProcessing = firstTimestamp >= program.startProcessingAt
    } else {
      startProcessing = true
    }
    if (program.begin) {
      begin = firstTimestamp >= program.begin
    } else {
      if (program.startProcessingAt) {
        begin = false
      } else {
        begin = true
      }
    }
    if (program.verbose) {
      if (program.startProcessingAt) {
        console.log('start-processing-at', program.startProcessingAt.toISO(), startProcessing)
      }
      if (program.begin) {
        console.log('begin', program.begin.toISO(), begin)
      }
      if (program.end) {
        console.log('end', program.end.toISO(), end)
      }
      console.log({ startProcessing, begin, end })
      console.log('---- while loop')
    }

    while (candle && !end) {

      /*
        This is the heart of the analysis pipeline.
        - Calculate marketState using the latest candle.
        - Inform the strategy of the latest marketState and executedOrders.
        - Receive a new strategyState and a new list of orders.
        - Give the orders to the simulated exchange.
        - Receive a new exchangeState and a new list of executedOrders.
        - Load the next candle and repeat until and end condition is met.

        // With the noise removed, the heart of the loop looks like this:
        marketState = iterate(candle)
        ;[strategyState, orders] = strategy(strategyState, marketState, executedOrders)
        ;[exchangeState, executedOrders] = await exchange(orders, exchangeState, candle)
      */
      if (startProcessing) {
        marketState = iterate(candle)
      }
      if (program.verbose) {
        if (time.isTimeframeBoundary('1d', time.dt(candle[0]))) {
          // I want to show {close,positionDirection,equity,positionSize}
          let close = candle[4]
          let equity = 0
          let entry = 0
          let positionDirection = '-'
          let positionSize = 0
          if (exchangeState) {
            if (exchangeState.position > 0) {
              positionDirection = 'L'
            } else if (exchangeState.position < 0) {
              positionDirection = 'S'
            }
            equity = calculateEquity(exchangeState, close)
            positionSize = Math.abs(exchangeState.position)
            entry = exchangeState.averageEntryPrice
          }
          console.log(time.dt(candle[0]).toISO(), `close:${close} direction:${positionDirection} size:${positionSize} entry:${entry} equity:${equity}`)
        }
      }
      // This if-block is the heart. Strategy and exchange processing happen here.
      if (begin) {
        ;[strategyState, orders] = strategy(strategyState, marketState, executedOrders)
        if (program.verbose && orders && orders.length) {
          console.log('orders: ', orders)
        }
        ;[exchangeState, executedOrders] = await exchange(orders, exchangeState, candle)
        if (program.verbose && executedOrders && executedOrders.length) {
          const filledOrders = executedOrders.filter((o) => o.status === 'filled')
          allExecutedOrders.push(...filledOrders)
          const key = `imd${program.timeframe}`
          const close = marketState[key].close[0]
          //console.log('executedOrders: ', executedOrders)
          console.log('equity: ', calculateEquity(exchangeState, close))
        }
        // log executedOrders
        executedOrders.forEach((o) => {
          const rate = o.type === 'market' ? FEES.taker : FEES.maker
          const line = {
            ts: time.iso(o.timestamp),
            side: o.action,
            type: o.type,
            symbol: program.market,
            quantity: o.quantity,
            price: o.fillPrice,
            fee: utils.tradingFee(rate, (o.quantity * o.fillPrice), o.fillPrice)
          }
          line.fee$ = line.fee * o.fillPrice
          orderLogger.info(line)
        })
        // record pnl (but it's tricky) (maybe the simulator should do it)
        if (time.isTimeframeBoundary(program.pnlTimeframe, time.dt(candle[0]))) {
          const pnlImd = `imd${program.pnlTimeframe}`
          const price = marketState[pnlImd].close[0]
          const equity = calculateEquity(exchangeState, price)
          historicalPnl.push([
            candle[0], // timestamp
            equity,    // equity
            exchangeState.pnl,
            exchangeState.unrealizedPnl
          ])
        }
      }
      candle = await nextCandle()
      // Check candle[0] for begin and end conditions
      if (candle) {
        let timestamp = time.dt(candle[0])
        if (!begin) {
          begin = timestamp >= program.begin
          if (begin && program.verbose) {
            console.log('starting strategy at', timestamp.toISO())
          }
        }
        if (program.end && candle) {
          end = timestamp > program.end
          if (end && program.verbose) {
            console.log('ending strategy at', timestamp.toISO())
          }
        }
        if (!startProcessing) {
          startProcessing = timestamp >= program.startProcessingAt
          if (startProcessing && program.verbose) {
            console.log('start processing at', timestamp.toISO())
          }
          if (startProcessing && !program.begin) {
            begin = true
            if (program.verbose) {
              console.log('starting strategy at', timestamp.toISO())
            }
          }
        }
      }
      if (program.interactive) {
        await interactiveLoop({marketState, exchangeState, strategyState, orders, executedOrders, candle});
      }
    }

    // What's the damage?
    //utils.dump(marketState.imd4h, 'imd4h_2.json')
    //utils.dump(strategyState, 'state.json')
    console.log(exchangeState)
    const key = `imd${program.timeframe}`
    const close = marketState[key].close[0]
    console.log('Closing Price', close)
    console.log('Closing DateTime', time.iso(marketState[key].timestamp[0]))
    console.log('Equity', calculateEquity(exchangeState, close))  // XXX If the position is negative, figure out the short profit correctly.
    //console.log(allExecutedOrders)
    //utils.dump(info, `${first}.json`)
    if (program.gnuplot) {
      const shouldPlot1m = false
      const dir = orderLogger.dir
      const writtenPaths = []
      //console.log({dir, len1h: marketState.imd1h.timestamp.length, len1d: marketState.imd1d.timestamp.length })
      const imdKeys = Object.keys(marketState).filter((k) => k.match(/^imd/))
      await Bluebird.each(imdKeys, async (k) => {
        if (k === 'imd1m' && !shouldPlot1m) return // skim imd1m for now
        const tf = k.replace(/imd/, '')
        const dataPath = `${dir}/${tf}.data`
        writtenPaths.push(dataPath)
        const out = fs.createWriteStream(dataPath)
        await gnuplot.writeImd(marketState[k], out)
      })
      const dataPath = `${dir}/orders.data`
      writtenPaths.push(dataPath)
      writeOrdersSync(allExecutedOrders, dataPath)
      const pnlPath = `${dir}/pnl.data`
      writtenPaths.push(pnlPath)
      writePnlSync(historicalPnl, pnlPath)
      // TODO - Write out pnl over time to its own file.
      if (program.verbose) {
        console.log('Gnuplot', writtenPaths)
      }
    }
    process.exit(0)
  }
  catch (err) {
    console.error(err.stack)
    process.exit(-1)
  }
}

if (require.main === module) {
  main()
}

// for repl debugging, export functions and variables here
module.exports = {
  main
}
