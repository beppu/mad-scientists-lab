#!/usr/bin/env node
// Does the potential for regular divergence exist?
const dotenv     = require('dotenv').config()
const pkg        = require('../package.json')
const ta         = require('../index')
const time       = require('../time')
const utils      = require('../utils')
const pipeline   = require('../pipeline')
const ix         = require('../indicators')
const strategies = require('../strategies')
const simulator  = require('../exchanges/simulator')
const luxon      = require('luxon')
const commander  = require('commander')
const talib      = require('talib')
const beautify   = require('json-beautify')

const {DateTime} = luxon

function parseIntBase10(n) {
  return parseInt(n, 10)
}

async function main() {
  const program   = new commander.Command();
  program
    .version(pkg.version)
    .description('Backtest a trading strategy against historical price data')
    .option('-x, --exchange <NAME>', 'Exchange to pull data from', process.env.TA_EXCHANGE)
    .option('-m, --market <SYMBOL>', 'Market in exchange to pull data from', process.env.TA_MARKET)
    .option('-t, --timeframe <INTERVAL>', 'Candlestick duration for market data', process.env.TA_TIMEFRAME)
    .option('-b, --balance <DOLLARS>', 'Amount of money to start with', parseIntBase10, 100000)
    .option('-s, --strategy <STRATEGY>', 'Name of trading strategy to use', 'BuyAndHold')
    .option('-d, --data <PATH>', 'Directory to store candlestick data in', './data')
  program.parse(process.argv)
  let optionsAreMissing = false
  if (optionsAreMissing) {
    process.exit(-1)
  }
  try {
    /*
     * I need an execution environment.
     * The strategy has to ask for some things upfront.
     * - What indicators do you want on which timeframes?
     * - The environment must be able to emulate larger timeframes by aggregating smaller timeframes.
     * The execution environment has to provide the data that the strategy asks for.
     * - I have a way of downloading candles now.
     * - I may want to standardize how I store them so that I can predictably retrieve them.
     *   + `${exchange}/${market}/${timeframe}/${timestamp}.json`
     *   + files are assumed to be in numeric order and without gaps
     * The analysis state should change as new data comes in.
     * Based on the analysis state, orders should be placed by the strategy when appropriate.
     */

    // Let's feel this out.

    // Exchange Simulator
    const sx = simulator.create({ balance: program.balance })

    // Strategy
    const config = { balance: program.balance }
    const [indicatorSpecs, strategy] = strategies[program.strategy](program.timeframe, config)
    console.log(indicatorSpecs)

    // Pipeline of Price Data
    const iterate = pipeline.mainLoopFn(program.timeframe, indicatorSpecs)
    const nextCandle = await pipeline.loadCandlesFromFS(program.data, program.exchange, program.market, program.timeframe)

    // Mutable Variables
    let orders
    let marketState
    let exchangeState, executedOrders
    let candle = await nextCandle()
    while (candle) {
      marketState = iterate(candle)
      orders = strategy(marketState)
      ;[exchangeState, executedOrders] = sx(exchangeState, orders, candle)
      if (orders && orders.length) {
        console.log({ candle, orders })
      }
      candle = await nextCandle()
    }

    // What's the damage?
    console.log(exchangeState)
    const close = marketState.imd1d.close[0]
    console.log('Equity', (close * exchangeState.position) + exchangeState.balance)
  }
  catch (err) {
    console.error(err.stack)
    process.exit(-1)
  }
}

main()
