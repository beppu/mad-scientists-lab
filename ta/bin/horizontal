#!/usr/bin/env node
const dotenv    = require('dotenv').config()
const pkg       = require('../package.json')
const ta        = require('../index')
const utils     = require('../utils')
const luxon     = require('luxon')
const commander = require('commander')
const talib     = require('talib')
const beautify  = require('json-beautify')

function greaterThan(imd, price) {
  return imd.close[1] < price && imd.close[0] > price
}

function greaterThanNow(imd, price) {
  return imd.close[0] > price
}

function lessThan(imd, price) {
  return imd.close[1] > price && imd.close[0] < price
}

function lessThanNow(imd, price) {
  return imd.close[0] < price
}

async function main() {
  const program   = new commander.Command();
  program
    .version(pkg.version)
    .description('Did price go above or below a horizontal level?')
    .usage('[option]... <price>')
    .option('-x, --exchange <NAME>', 'Exchange to pull data from', process.env.TA_EXCHANGE)
    .option('-m, --market <SYMBOL>', 'Market in exchange to pull data from', process.env.TA_MARKET)
    .option('-t, --timeframe <INTERVAL>', 'Candlestick duration for market data', process.env.TA_TIMEFRAME)
    .option('-g, --gt', 'Greater than')
    .option('-l, --lt', 'Less than')
    .option('-s, --scan', 'Scan for all occurrences')
    .option('-n, --now', 'Are they aligned now regardless of the past')
  program.parse(process.argv)
  if (program.gt && program.lt) {
    console.error("You can't use --gt and --lt at the same time.  Pick one and only one.")
    process.exit(-1)
  }
  if (!program.gt && !program.lt) {
    console.error("You must use either --gt or --lt.")
    process.exit(-1)
  }
  let optionsAreMissing = false;
  ['exchange', 'market', 'timeframe'].forEach((opt) => {
    if (!program[opt]) {
      console.error(`The --${opt} option is required.`)
      optionsAreMissing = true
    }
  })
  if (optionsAreMissing) {
    process.exit(-1)
  }
  if (program.args.length < 1) {
    console.error("A price must be provided.")
    process.exit(-1)
  }
  const price = parseFloat(program.args[0])
  if (Number.isNaN(price)) {
    console.warn(`Parsing '${program.args[0]}' yielded NaN.`)
    process.exit(-1)
  }
  try {
    const candles    = await ta.loadCandles(program.exchange, program.market, program.timeframe)
    const marketData = ta.marketDataFromCandles(candles)
    const imd        = ta.invertedMarketData(marketData)

    if (program.scan) {
      const compare = (program.gt)
        ? (imd) => greaterThan(imd, price)
        : (imd) => lessThan(imd, price)
      const indices = ta.scan(imd, compare)
      if (indices.length > 0) {
        const matches = ta.invertedCandles(imd, indices)
        console.log(beautify(matches, null, 2, 128))
        process.exit(0)
      } else {
        process.exit(1)
      }
    } else if (program.now) {
      if (program.gt) {
        if (greaterThanNow(imd, price)) {
          process.exit(0)
        } else {
          process.exit(1)
        }
      } else {
        if (lessThanNow(imd, price)) {
          process.exit(0)
        } else {
          process.exit(1)
        }
      }
    } else {
      if (program.gt) {
        if (greaterThan(imd, price)) {
          process.exit(0)
        } else {
          process.exit(1)
        }
      } else {
        if (lessThan(imd, price)) {
          process.exit(0)
        } else {
          process.exit(1)
        }
      }
    }
  }
  catch (err) {
    console.error(err.stack)
    process.exit(-1)
  }
}

main()
