#!/usr/bin/env node
// Does the potential for regular divergence exist?
const dotenv    = require('dotenv').config()
const pkg       = require('../package.json')
const ta        = require('../index')
const utils     = require('../utils')
const luxon     = require('luxon')
const commander = require('commander')
const talib     = require('talib')
const beautify  = require('json-beautify')

function detectRegularBearishDivergence(imd, ageThreshold) {
  const clusters = utils.findClusters(imd, utils.highEnoughFn(1.1)) // XXX I only need the first two clusters.
  if (clusters.length < 2) {
    // not enough local highs detected
    console.log('clusters')
    return false
  }
  if (clusters[0][0] > ageThreshold) {
    // too far in the past
    console.log('age', clusters[0])
    return false
  }
  const high0 = utils.findLocalHigh(imd, clusters[0])
  const high1 = utils.findLocalHigh(imd, clusters[1])
  const rsi0 = imd.rsi[high0]
  const rsi1 = imd.rsi[high1]
  const regularBearishDivergence = rsi0 < rsi1
  if (regularBearishDivergence) {
    return true
  } else {
    return false
  }
}

function detectRegularBullishDivergence(imd, ageThreshold) {
  const clusters = utils.findClusters(imd, utils.lowEnoughFn(1.1)) // XXX I only need the first two clusters.
  if (clusters.length < 2) {
    // not enough local highs detected
    return false
  }
  if (clusters[0][0] > ageThreshold) {
    return false
  }
  const low0 = utils.findLocalLow(imd, clusters[0])
  const low1 = utils.findLocalLow(imd, clusters[1])
  const rsi0 = imd.rsi[low0]
  const rsi1 = imd.rsi[low1]
  const regularBullishDivergence = rsi0 > rsi1
  if (regularBullishDivergence) {
    return true
  } else {
    return true
  }
}

async function main() {
  const program   = new commander.Command();
  program
    .version(pkg.version)
    .description('Does divergence exist?')
    .option('-x, --exchange <NAME>', 'Exchange to pull data from', process.env.TA_EXCHANGE)
    .option('-m, --market <SYMBOL>', 'Market in exchange to pull data from', process.env.TA_MARKET)
    .option('-t, --timeframe <INTERVAL>', 'Candlestick duration for market data', process.env.TA_TIMEFRAME)
    .option('-H, --hidden', 'Search for hidden divergence instead of regular')
    .option('-b, --bearish', 'Search for bearish divergence instaed of bullish')
    .option('-a, --age-threshold <CANDLES>', 'Number of candles allowed after detection', 2)
    .option('-g, --gap-threshold <CANDLES>', 'Number of candles required between extremes', 5)
    .option('-p, --peak-threshold <PERCENT>', '% distance allowed from upper or lower bband', 1.1)
    .option('-s, --scan', 'Scan for all occurrences')
    .option('-n, --now', 'Does divergence exist right now regardless of the past')
  program.parse(process.argv)
  let optionsAreMissing = false;
  ['exchange', 'market', 'timeframe'].forEach((opt) => {
    if (!program[opt]) {
      console.error(`The --${opt} option is required.`)
      optionsAreMissing = true
    }
  })
  if (optionsAreMissing) {
    process.exit(-1)
  }
  try {
    const candles = await ta.loadCandles(program.exchange, program.market, program.timeframe)
    const md      = ta.marketDataFromCandles(candles)
    const imd     = ta.invertedMarketData(md)

    // bollinger bands
    const bbandSettings = ta.id.bbands(md)
    const bbands = talib.execute(bbandSettings)
    ta.invertedAppend(imd, 'upperBand',  bbands.result.outRealUpperBand)
    ta.invertedAppend(imd, 'middleBand', bbands.result.outRealMiddleBand)
    ta.invertedAppend(imd, 'lowerBand',  bbands.result.outRealLowerBand)

    // rsi
    const rsiSettings = ta.id.rsi(md)
    const rsi = talib.execute(rsiSettings)
    ta.invertedAppend(imd, 'rsi', rsi.result.outReal)

    /*
     * regular bullish divergence (default)
     * - using closes, find valleys that touch the lower band
     *   + if there's a cluster, choose the lowest touch
     * - scan backwards to find the next valley
     * - once two price lows are found, compare the RSI values that correspond to the same candles.
     * - does bullish divergence exist or not?
     */

    let ageThreshold = program.ageThreshold

    if (program.scan) {
    } else if (program.now) {
      ageThreshold = 0
      if (program.bearish) {
        if (detectRegularBearishDivergence(imd, ageThreshold)) {
          process.exit(0)
        } else {
          process.exit(1)
        }
      } else {
        if (detectRegularBullishDivergence(imd, ageThreshold)) {
          process.exit(0)
        } else {
          process.exit(1)
        }
      }
    } else {
      if (program.bearish) {
        if (detectRegularBearishDivergence(imd, ageThreshold)) {
          process.exit(0)
        } else {
          process.exit(1)
        }
      } else {
        if (detectRegularBullishDivergence(imd, ageThreshold)) {
          process.exit(0)
        } else {
          process.exit(1)
        }
      }
    }
  }
  catch (err) {
    console.error(err.stack)
    process.exit(-1)
  }
}

main()

/*

// REPL Debugging

x = {}
ta.loadCandles('binance', 'BTC/USDT', '3m').then((candles) => x.candles = candles)

md = ta.marketDataFromCandles(x.candles)
imd = ta.invertedMarketData(md)
bbs = ta.id.bbands(md)
bb = talib.execute(bbs)
ta.invertedAppend(imd, 'upperBand',  bb.result.outRealUpperBand)
ta.invertedAppend(imd, 'middleBand', bb.result.outRealMiddleBand)
ta.invertedAppend(imd, 'lowerBand',  bb.result.outRealLowerBand)
rsiSettings = ta.id.rsi(md)
rsi = talib.execute(rsiSettings)
ta.invertedAppend(imd, 'rsi', rsi.result.outReal)

clusters = utils.findClusters(imd, utils.highEnoughFn(0)) // XXX I only need the first two clusters.
high0 = utils.findLocalHigh(imd, clusters[0])
high1 = utils.findLocalHigh(imd, clusters[1])
rsi0 = imd.rsi[high0]
rsi1 = imd.rsi[high1]
console.log({ high0, high1, rsi0, rsi1 })
 */
