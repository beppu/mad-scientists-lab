#!/usr/bin/env node
// Are the given MAs aligned from highest value to lowest value?
const dotenv    = require('dotenv').config()
const pkg       = require('../package.json')
const ta        = require('../index')
const utils     = require('../utils')
const luxon     = require('luxon')
const commander = require('commander')
const talib     = require('talib')
const beautify  = require('json-beautify')

// sma 50 100 200 is bullish if sma50 > sma100 > sma200 (if they're descending)
function isDescendingFn(ma, periods, index) {
  return function(imd) {
    let series = periods.map((p) => {
      let key = `${ma}${p}`
      return imd[key][index]
    })
    return utils.isDescending(series)
  }
}

// find the candle where the MAs switched from being unaligned to aligned
function becameAlignedFn(ma, periods) {
  const isDescending0 = isDescendingFn(ma, periods, 0)
  const isDescending1 = isDescendingFn(ma, periods, 1)
  return function(imd) {
    //console.log(imd.sma50[0], imd.sma100[0], imd.sma200[0])
    if (isDescending0(imd) && !isDescending1(imd)) {
      return true
    } else {
      return false
    }
  }
}

async function main() {
  const program   = new commander.Command();
  program
    .version(pkg.version)
    .description('Are the given MAs aligned from highest value to lowest value?')
    .arguments('<MOVING_AVERAGE> <PERIOD>...')
    .option('-x, --exchange <NAME>', 'Exchange to pull data from', process.env.TA_EXCHANGE)
    .option('-m, --market <SYMBOL>', 'Market in exchange to pull data from', process.env.TA_MARKET)
    .option('-t, --timeframe <INTERVAL>', 'Candlestick duration for market data', process.env.TA_TIMEFRAME)
    .option('-s, --scan', 'Scan for all occurrences')
    .option('-n, --now', 'Are they aligned now regardless of the past')
  program.parse(process.argv)
  let optionsAreMissing = false;
  ['exchange', 'market', 'timeframe'].forEach((opt) => {
    if (!program[opt]) {
      console.error(`The --${opt} option is required.`)
      optionsAreMissing = true
    }
  })
  if (optionsAreMissing) {
    process.exit(-1)
  }

  if (program.args.length < 3) {
    console.error("A MOVING_AVERAGE and at least 2 PERIODs must be provided.")
    process.exit(-1)
  }

  const ma = program.args[0]
  if (!ma.match(/^[es]ma$/)) {
    console.error(`The MOVING_AVERAGE must be 'ema' or 'sma'.`)
    process.exit(-1)
  }

  const periods = []
  for (let i = 1; i < program.args.length; i++) {
    const _p = program.args[i]
    if (!_p.match(/^[0-9]+$/)) {
      console.error(`The PERIOD "${_p}" must be a positive decimal integer.`)
      process.exit(-1)
    } else {
      periods.push(parseInt(_p))
    }
  }

  try {
    const candles            = await ta.loadCandles(program.exchange, program.market, program.timeframe)
    const marketData         = ta.marketDataFromCandles(candles)
    const invertedMarketData = ta.invertedMarketData(marketData)

    periods.forEach((period) => {
      const indicatorSettings = ta.id[ma](marketData, period)
      const r                 = talib.execute(indicatorSettings)
      ta.invertedAppend(invertedMarketData, `${ma}${period}`, r.result.outReal)
    })

    if (program.scan) {
      const becameAligned = becameAlignedFn(ma, periods)
      const indices = ta.scan(invertedMarketData, becameAligned)
      if (indices.length > 0) {
        const matches = ta.invertedCandles(invertedMarketData, indices)
        console.log(beautify(matches, null, 2, 128))
        process.exit(0)
      } else {
        process.exit(1)
      }
    } else if (program.now) {
      // Are the MAs aligned right now regardless of the previous candles values?
      const isDescending = isDescendingFn(ma, periods, 0)
      if (isDescending(invertedMarketData)) {
        process.exit(0)
      } else {
        process.exit(1)
      }
    } else {
      const becameAligned = becameAlignedFn(ma, periods)
      if (becameAligned(invertedMarketData)) {
        process.exit(0)
      } else {
        process.exit(1)
      }
    }
  }
  catch (err) {
    console.error(err.stack)
    process.exit(-1)
  }
}

main()
