#!/usr/bin/env -S node --expose-gc --experimental-repl-await
const fs = require('fs')
const repl = require('repl')
const dotenv = require('dotenv').config()
const luxon = require('luxon')
const commander = require('commander')
const pino = require('pino')
const sprintf = require('sprintf')
const Bluebird = require('bluebird')
const merge = require('lodash.merge')
const pkg = require('../package.json')
const ta = require('../index')
const time = require('../time')
const utils = require('../utils')
const pipeline = require('../pipeline')
const live = require('../live')
const exchanges = require('../exchanges')
const strategies = require('../strategies') // TODO minimize memory usage by only loading one strategy into memory
const DateTime = luxon.DateTime
const SocksProxyAgent = require('socks-proxy-agent')

const DEFAULT_STRATEGY = 'MM'

// TODO - Log to only one location for live trading.
// That's what I should have done for backtesting too.
// Having too many log files with different paths makes them difficult to work with.
// Remember the ELK stack?
// ElasticSearch, LogStash, Kibana
// That's how logs should be handled.

async function main() {
  const program = new commander.Command()
  program
    .version(pkg.version)
    .description('Run a live trading algorithm on the given exchange and market')
    .option('-x, --exchange <NAME>', 'Exchange to pull data from', process.env.TA_EXCHANGE)
    .option('-m, --market <SYMBOL>', 'Market in exchange to pull data from', process.env.TA_MARKET)
    .option('-d, --data <PATH>', 'Directory to store candlestick data in', './data')
    .option('-s, --strategy <STRATEGY>', 'Name of trading strategy to use', DEFAULT_STRATEGY)
    .option('-c, --config <CONFIG.JSON>', 'Path to a JSON config file for the strategy')
    .option('--memory <KEEP,AFTER>', 'Limit memory usage of invertedSeries', '')
    .option('--start-processing-at <DATETIME>', 'Refrain from indicator calculation until the given DateTime is reached', DateTime.fromISO)
    .option('-l, --log <LOG_FILE>', 'File to store activity logs', (id) => id, './log/trade.log')
    .option('-S, --socks <URL>', 'A URL for a SOCKS proxy')
  program.parse(process.argv)

  // TODO Sanity Check
  if (!program.exchange) {
    // The exchange must exist in the list of supported exchanges for trading
    process.exit(-1)
  }
  if (program.exchange) {
    if (!exchanges[program.exchange]) {
      console.error(`${program.exchange} is not supported for trading.`)
      process.exit(-1)
    }
  }

  // Initialize Logger
  const logger = pino(pino.destination(program.log))

  // Initialize SocksProxyAgent if --socks is specified
  let agent
  if (program.socks) agent = new SocksProxyAgent(program.socks)

  // start repl
  const r = repl.start({ prompt: '> ' })
  // provide context
  Object.assign(r.context, {
    luxon,
    DateTime: luxon.DateTime,
    Duration: luxon.Duration,
    commander,
    sprintf,
    Bluebird,
    pkg,
    ta,
    time,
    utils,
    pipeline,
    live,
    strategies,
    agent
  })

  // Construct Config
  let strategyConfig
  if (program.config) {
    const configPath = `${process.cwd()}/${program.config}`
    const jsonConfig = require(configPath)
    strategyConfig = merge({ logger }, jsonConfig) // XXX 2021-06-24 noticed that merge mutated config which was a surprise.
  } else {
    strategyConfig = { logger }
  }

  // TODO initialize strategy
  const Strategy = strategies[program.strategy]
  if (!Strategy) {
    console.error(`Strategy ${program.strategy} not found`)
    process.exit(-1)
  }
  const [indicatorSpecs, strategy] = Strategy.init(strategyConfig)
  indicatorSpecs.inverted = true
  if (program.memory) {
    const memory = program.memory.split(',').map((v) => utils.parseIntB10(v))
    indicatorSpecs.memory = { keep: memory[0], after: memory[1] }
  }

  // add strategy to context also
  r.context.strategyConfig = strategyConfig // I don't like that logger makes this hard to read.
  r.context.strategy = strategy
  r.context.indicatorSpecs = indicatorSpecs


  const options = {}
  options.key = process.env.TA_BYBIT_API_KEY
  options.secret = process.env.TA_BYBIT_API_SECRET
  options.livenet = true
  // TODO change logDir to be a file
  const trader = new live.Trader({ dataDir: program.data, logDir: program.log, exchange: program.exchange, market: program.market, strategy, options })
  // go live
  const since = program.startProcessAt || DateTime.local().minus({ months: 2 })
  trader.go(since)
}

if (require.main === module) {
  main()
}

module.exports = {
  main
}
