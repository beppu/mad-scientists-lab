#!/usr/bin/env node

/*
 * a server to proxy https & websockets
 */

const dotenv    = require('dotenv').config()
const pkg       = require('../package.json')
const pino      = require('pino')
const http      = require('http')
const httpProxy = require('http-proxy')

const commandLogger = pino(pino.destination('/tmp/proxy.log'))
const commander = require('commander')

async function main() {
  const
    program          = new commander.Command(),
    proxy_wss        = process.env.PROXY_WSS,
    proxy_wss_port   = process.env.PROXY_WSS_PORT,
    proxy_https      = process.env.PROXY_HTTPS,
    proxy_https_port = process.env.PROXY_HTTPS_PORT
  program
    .version(pkg.version)
    .description('proxy https & wss connections')
    .arguments('<MESSAGE>')
    .option('-w, --wss <URI>', 'wss target', proxy_wss)
    .option('-p, --wssport <PORT>', 'wss bind/listen port', proxy_wss_port)
    .option('-h, --https <URI>', 'https target', proxy_https)
    .option('-q, --httpsport <PORT>', 'https listen/bind port', proxy_https_port)
  commandLogger.info({ proxy_wss, proxy_wss_port, proxy_https, proxy_https_port }, process.argv.join(' | '))
  program.parse(process.argv)

  if (!program.wss && !program.https) {
    // guard
    console.error('Provide at least one wss or https proxy target')
    process.exit(-1)
  }

  if (program.wss) {
    console.log(`WSS listening on port ${program.wssport} -> ${program.wss}`)
    const proxy = httpProxy.createServer({
      target: program.wss,
      ws: true
    })
    proxy.listen(program.wssport)
    bindEvents(proxy)
  }

  if (program.https) {
    console.log(`HTTPS listening on port ${program.httpsport} -> ${program.https}`)
    const proxy = httpProxy.createServer({
      ssl: {
        key: fs.readFileSync('valid-ssl-key.pem', 'utf8'),
        cert: fs.readFileSync('valid-ssl-cert.pem', 'utf8')
      },
      target: program.https,
      secure: true
    })
    proxy.listen(program.httpsport)
    bindEvents(proxy)
  }
}


// ---------
main()


// ---------
function bindEvents(proxy) {
  proxy.on('open', function (proxySocket) {
    console.log('+ connection')
  })
  proxy.on('close', function (res, socket, head) {
    console.log('- connection')
  })
}
